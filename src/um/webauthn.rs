// Licensed under the Apache License, Version 2.0
// <LICENSE-APACHE or http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your option.
// All files in the project carrying such notice may not be copied, modified, or distributed
// except according to those terms.
use shared::guiddef::GUID;
use shared::minwindef::{BOOL, DWORD, PBYTE};
use shared::windef::HWND;
use um::winnt::{HRESULT, LPCWSTR, PCWSTR, PVOID};
pub const WEBAUTHN_API_VERSION_1: DWORD = 1;
pub const WEBAUTHN_API_VERSION_2: DWORD = 2;
pub const WEBAUTHN_API_CURRENT_VERSION: DWORD = WEBAUTHN_API_VERSION_2;
pub const WEBAUTHN_HASH_ALGORITHM_SHA_256: &'static str = "SHA-256";
pub const WEBAUTHN_HASH_ALGORITHM_SHA_384: &'static str = "SHA-384";
pub const WEBAUTHN_HASH_ALGORITHM_SHA_512: &'static str = "SHA-512";
pub const WEBAUTHN_CLIENT_DATA_CURRENT_VERSION: DWORD = 1;
STRUCT!{struct WEBAUTHN_CLIENT_DATA {
    dwVersion: DWORD,
    cbClientDataJSON: DWORD,
    pbClientDataJSON: PBYTE,
    pwszHashAlgId: LPCWSTR,
}}
pub type PWEBAUTHN_CLIENT_DATA = *mut WEBAUTHN_CLIENT_DATA;
pub type PCWEBAUTHN_CLIENT_DATA = *const WEBAUTHN_CLIENT_DATA;
pub const WEBAUTHN_CREDENTIAL_CURRENT_VERSION: DWORD = 1;
pub const WEBAUTHN_CREDENTIAL_TYPE_PUBLIC_KEY: &'static str = "public-key";
STRUCT!{struct WEBAUTHN_CREDENTIAL {
    dwVersion: DWORD,
    cbId: DWORD,
    pbId: PBYTE,
    pwszCredentialType: LPCWSTR,
}}
pub type PWEBAUTHN_CREDENTIAL = *mut WEBAUTHN_CREDENTIAL;
pub type PCWEBAUTHN_CREDENTIAL = *const WEBAUTHN_CREDENTIAL;
STRUCT!{struct WEBAUTHN_CREDENTIALS {
    cCredentials: DWORD,
    pCredentials: PWEBAUTHN_CREDENTIAL,
}}
pub type PWEBAUTHN_CREDENTIALS = *mut WEBAUTHN_CREDENTIALS;
pub type PCWEBAUTHN_CREDENTIALS = *const WEBAUTHN_CREDENTIALS;
pub const WEBAUTHN_CTAP_TRANSPORT_USB: DWORD = 0x01;
pub const WEBAUTHN_CTAP_TRANSPORT_NFC: DWORD = 0x02;
pub const WEBAUTHN_CTAP_TRANSPORT_BLE: DWORD = 0x04;
pub const WEBAUTHN_CTAP_TRANSPORT_TEST: DWORD = 0x08;
pub const WEBAUTHN_CTAP_TRANSPORT_INTERNAL: DWORD = 0x10;
pub const WEBAUTHN_CTAP_TRANSPORT_FLAGS_MASK: DWORD = 0x1F;
pub const WEBAUTHN_CREDENTIAL_EX_CURRENT_VERSION: DWORD = 1;
STRUCT!{struct WEBAUTHN_CREDENTIAL_EX {
    dwVersion: DWORD,
    cbId: DWORD,
    pbId: PBYTE,
    pwszCredentialType: LPCWSTR,
    dwTransports: DWORD,
}}
pub type PWEBAUTHN_CREDENTIAL_EX = *mut WEBAUTHN_CREDENTIAL_EX;
pub type PCWEBAUTHN_CREDENTIAL_EX = *const WEBAUTHN_CREDENTIAL_EX;
STRUCT!{struct WEBAUTHN_EXTENSION {
    pwszExtensionIdentifier: LPCWSTR,
    cbExtension: DWORD,
    pvExtension: PVOID,
}}
pub type PWEBAUTHN_EXTENSION = *mut WEBAUTHN_EXTENSION;
pub type PCWEBAUTHN_EXTENSION = *const WEBAUTHN_EXTENSION;
STRUCT!{struct WEBAUTHN_EXTENSIONS {
    cExtensions: DWORD,
    pExtensions: PWEBAUTHN_EXTENSION,
}}
pub type PWEBAUTHN_EXTENSIONS = *mut WEBAUTHN_EXTENSIONS;
pub type PCWEBAUTHN_EXTENSIONS = *const WEBAUTHN_EXTENSIONS;
STRUCT!{struct WEBAUTHN_CREDENTIAL_LIST {
    cCredentials: DWORD,
    ppCredentials: *mut PWEBAUTHN_CREDENTIAL_EX,
}}
pub type PWEBAUTHN_CREDENTIAL_LIST = *mut WEBAUTHN_CREDENTIAL_LIST;
pub type PCWEBAUTHN_CREDENTIAL_LIST = *const WEBAUTHN_CREDENTIAL_LIST;
pub const WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_1: DWORD = 1;
pub const WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_2: DWORD = 2;
pub const WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_3: DWORD = 3;
pub const WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_4: DWORD = 4;
pub const WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_CURRENT_VERSION: DWORD =
    WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS_VERSION_4;
pub const WEBAUTHN_AUTHENTICATOR_ATTACHMENT_ANY: DWORD = 0;
pub const WEBAUTHN_AUTHENTICATOR_ATTACHMENT_PLATFORM: DWORD = 1;
pub const WEBAUTHN_AUTHENTICATOR_ATTACHMENT_CROSS_PLATFORM: DWORD = 2;
pub const WEBAUTHN_AUTHENTICATOR_ATTACHMENT_CROSS_PLATFORM_U2F_V2: DWORD = 3;
pub const WEBAUTHN_USER_VERIFICATION_REQUIREMENT_ANY: DWORD = 0;
pub const WEBAUTHN_USER_VERIFICATION_REQUIREMENT_REQUIRED: DWORD = 1;
pub const WEBAUTHN_USER_VERIFICATION_REQUIREMENT_PREFERRED: DWORD = 2;
pub const WEBAUTHN_USER_VERIFICATION_REQUIREMENT_DISCOURAGED: DWORD = 3;
STRUCT!{struct WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS {
    dwVersion: DWORD,
    dwTimeoutMilliseconds: DWORD,
    CredentialList: WEBAUTHN_CREDENTIALS,
    Extensions: WEBAUTHN_EXTENSIONS,
    dwAuthenticatorAttachment: DWORD,
    dwUserVerificationRequirement: DWORD,
    dwFlags: DWORD,
    pwszU2fAppId: PCWSTR,
    pbU2fAppId: *mut BOOL,
    pCancellationId: *mut GUID,
    pAllowCredentialList: PWEBAUTHN_CREDENTIAL_LIST,
}}
pub type PWEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS = *mut
    WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS;
pub type PCWEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS = *const
    WEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS;
pub const WEBAUTHN_ASSERTION_CURRENT_VERSION: DWORD = 1;
STRUCT!{struct WEBAUTHN_ASSERTION {
    dwVersion: DWORD,
    cbAuthenticatorData: DWORD,
    pbAuthenticatorData: PBYTE,
    cbSignature: DWORD,
    pbSignature: PBYTE,
    Credential: WEBAUTHN_CREDENTIAL,
    cbUserId: DWORD,
    pbUserId: PBYTE,
}}
pub type PWEBAUTHN_ASSERTION = *mut WEBAUTHN_ASSERTION;
pub type PCWEBAUTHN_ASSERTION = *const WEBAUTHN_ASSERTION;
extern "system" {
    pub fn WebAuthNAuthenticatorGetAssertion(
        hWnd: HWND,
        pwszRpId: LPCWSTR,
        pWebAuthNClientData: PCWEBAUTHN_CLIENT_DATA,
        pWebAuthNGetAssertionOptions: PCWEBAUTHN_AUTHENTICATOR_GET_ASSERTION_OPTIONS,
        ppWebAuthNAssertion: *mut PWEBAUTHN_ASSERTION,
    ) -> HRESULT;
}
